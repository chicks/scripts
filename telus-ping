#! /usr/bin/perl 

use strict;
use IO::Socket;
use Getopt::Long;
use Time::HiRes qw(gettimeofday tv_interval);

# Arguments
my $help;
my $long_output;
my $dst_ip   = '10.100.32.25'; 
my $dst_port = '8080';
my $timeout  = '30'; 

# Globals
my $remote;
my $request;
my $response;
my $start_req;
my $elapsed_req_ms;
my $end_req;
my $results = {};

#die usage() if (($#ARGV < 1 ) 
die usage() if ( ! GetOptions ( 
                      'help|?'          => \$help,
                      'h|host=s'        => \$dst_ip,
                      'p|port=i'        => \$dst_port,
                      't|timeout=i'     => \$timeout, 
                      'l|long'          => \$long_output, ))
  or ( defined $help );

sub usage {
  print "Unknown option: @_\n" if ( @_ );
  print STDERR << "EOF";

  Usage:
    $0 [OPTIONS]... 

  Valid options are:
       [-?, --help]     display usage information
       [-h, --host]     set the remote host
       [-p, --port]     set the remote port
       [-t, --timeout]  set the connection timeout
       [-l, --long]     display parsed response

EOF
  exit;
}

# Start Timestamp
my $start_req = [gettimeofday];

# Build a socket
$remote = IO::Socket::INET->new( Proto     => 'tcp',
                                 PeerAddr  => $dst_ip,
                                 PeerPort  => $dst_port,
                                 Timeout   => $timeout,
                                 Blocking  => 0 )
or die "Can't connect to $dst_ip\:$dst_port\n";

$request = <<EOF;
GET /primary/index_en HTTP/1.0
x-up-calling-line-id: Load-Test-JMeter
connection: close

EOF

# Send request, and read the response
$remote->send($request) || die "send: $!";
my ($rin, $rout, $eout) ="";
vec($rin, fileno($remote), 1) = 1;
select($rout=$rin, undef, $eout=$rin, $timeout) or die "select: $!";
while(<$remote>) {
  $response .= $_;
}
$remote->close;

# End Timestamp
$end_req = [gettimeofday];

# calculate the elapsed time
$elapsed_req_ms = (tv_interval $start_req, $end_req) * 1000;

# Determine if we succeeded or not
if ($response =~ /HTTP\/1\.1\ 200/) {
  if (defined $long_output) { print "$response\n"};
  print "MTD Latency: $elapsed_req_ms ms\n";
} else {
  print "Bad Response: $response\n";
}

